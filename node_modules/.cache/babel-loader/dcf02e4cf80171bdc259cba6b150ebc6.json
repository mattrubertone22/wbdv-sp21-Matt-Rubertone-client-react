{"ast":null,"code":"const WIDGET_URL = process.env.REACT_APP_WIDGET_URL;\nconst TOPIC_URL = process.env.REACT_APP_TOPICS_URL;\nexport const findAllWidgets = () => fetch(WIDGET_URL).then(response => response.json());\nexport const createWidget = topicId => fetch(`http://localhost:8080/api/topics/${topicId}/widgets`, {\n  method: \"POST\",\n  body: JSON.stringify({\n    type: \"HEADING\",\n    size: 2,\n    text: \"New Widget\"\n  }),\n  headers: {\n    'content-type': 'application/json'\n  }\n}).then(response => response.json());\nexport const createWidgetForTopic = topicId => {\n  fetch(`${TOPIC_URL}/${topicId}/widgets`, {\n    method: \"POST\",\n    body: JSON.stringify({\n      type: \"HEADING\",\n      size: 2,\n      text: \"New Widget\"\n    }),\n    headers: {\n      \"content-type\": 'application/json'\n    }\n  }).then(response => response.json());\n};\nexport const findWidgetsForTopic = topicId => fetch(`http://localhost:8080/api/topics/${topicId}/widgets`).then(response => response.json());\nexport const deleteWidget = widgetId => fetch(`${WIDGET_URL}/${widgetId}`, {\n  method: 'DELETE'\n}).then(response => response.json());\nexport const updateWidget = (widgetId, updatedWidget) => {\n  fetch(`${WIDGET_URL}/${widgetId}`, {\n    method: \"PUT\",\n    body: JSON.stringify(updatedWidget),\n    headers: {\n      'content-type': 'application/json'\n    }\n  }).then(response => response.json());\n};\nconst widgetApi = {\n  createWidget,\n  findWidgetsForTopic,\n  deleteWidget,\n  updateWidget,\n  findAllWidgets,\n  createWidgetForTopic\n};\nexport default widgetApi;","map":{"version":3,"sources":["/Users/mattrubertone/Documents/Northeastern/wbdv-sp21-Matt-Rubertone-client-react/wbdv-sp21-matt-rubertone-client-react/src/services/widget-service.js"],"names":["WIDGET_URL","process","env","REACT_APP_WIDGET_URL","TOPIC_URL","REACT_APP_TOPICS_URL","findAllWidgets","fetch","then","response","json","createWidget","topicId","method","body","JSON","stringify","type","size","text","headers","createWidgetForTopic","findWidgetsForTopic","deleteWidget","widgetId","updateWidget","updatedWidget","widgetApi"],"mappings":"AAAA,MAAMA,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,oBAA/B;AACA,MAAMC,SAAS,GAAGH,OAAO,CAACC,GAAR,CAAYG,oBAA9B;AAEA,OAAO,MAAMC,cAAc,GAAG,MAC1BC,KAAK,CAACP,UAAD,CAAL,CACKQ,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,CADG;AAIP,OAAO,MAAMC,YAAY,GAAIC,OAAD,IACxBL,KAAK,CAAE,oCAAmCK,OAAQ,UAA7C,EAAwD;AACzDC,EAAAA,MAAM,EAAE,MADiD;AAEzDC,EAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,IAAAA,IAAI,EAAE,SAAP;AAAkBC,IAAAA,IAAI,EAAE,CAAxB;AAA2BC,IAAAA,IAAI,EAAE;AAAjC,GAAf,CAFmD;AAGzDC,EAAAA,OAAO,EAAE;AACL,oBAAgB;AADX;AAHgD,CAAxD,CAAL,CAOKZ,IAPL,CAOUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAPtB,CADG;AAUP,OAAO,MAAMW,oBAAoB,GAAIT,OAAD,IAAa;AAC7CL,EAAAA,KAAK,CAAE,GAAEH,SAAU,IAAGQ,OAAQ,UAAzB,EAAoC;AACrCC,IAAAA,MAAM,EAAE,MAD6B;AAErCC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,MAAAA,IAAI,EAAE,SAAP;AAAkBC,MAAAA,IAAI,EAAE,CAAxB;AAA2BC,MAAAA,IAAI,EAAE;AAAjC,KAAf,CAF+B;AAGrCC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AAH4B,GAApC,CAAL,CAMGZ,IANH,CAMQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EANpB;AAOH,CARM;AAUP,OAAO,MAAMY,mBAAmB,GAAIV,OAAD,IAC/BL,KAAK,CAAE,oCAAmCK,OAAQ,UAA7C,CAAL,CACKJ,IADL,CACUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADtB,CADG;AAIP,OAAO,MAAMa,YAAY,GAAIC,QAAD,IACxBjB,KAAK,CAAE,GAAEP,UAAW,IAAGwB,QAAS,EAA3B,EAA8B;AAC/BX,EAAAA,MAAM,EAAE;AADuB,CAA9B,CAAL,CAGKL,IAHL,CAGUC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAHtB,CADG;AAMP,OAAO,MAAMe,YAAY,GAAG,CAACD,QAAD,EAAWE,aAAX,KAA6B;AACrDnB,EAAAA,KAAK,CAAE,GAAEP,UAAW,IAAGwB,QAAS,EAA3B,EAA8B;AAC/BX,IAAAA,MAAM,EAAE,KADuB;AAE/BC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeU,aAAf,CAFyB;AAG/BN,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB;AAHsB,GAA9B,CAAL,CAIGZ,IAJH,CAIQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAJpB;AAKH,CANM;AAQP,MAAMiB,SAAS,GAAG;AACdhB,EAAAA,YADc;AACAW,EAAAA,mBADA;AACqBC,EAAAA,YADrB;AACmCE,EAAAA,YADnC;AACiDnB,EAAAA,cADjD;AACiEe,EAAAA;AADjE,CAAlB;AAIA,eAAeM,SAAf","sourcesContent":["const WIDGET_URL = process.env.REACT_APP_WIDGET_URL\nconst TOPIC_URL = process.env.REACT_APP_TOPICS_URL\n\nexport const findAllWidgets = () =>\n    fetch(WIDGET_URL)\n        .then(response => response.json());\n\nexport const createWidget = (topicId) =>\n    fetch(`http://localhost:8080/api/topics/${topicId}/widgets`, {\n        method: \"POST\",\n        body: JSON.stringify({type: \"HEADING\", size: 2, text: \"New Widget\"}),\n        headers: {\n            'content-type': 'application/json'\n        }\n    })\n        .then(response => response.json());\n\nexport const createWidgetForTopic = (topicId) => {\n    fetch(`${TOPIC_URL}/${topicId}/widgets`, {\n        method: \"POST\",\n        body: JSON.stringify({type: \"HEADING\", size: 2, text: \"New Widget\"}),\n        headers: {\n            \"content-type\": 'application/json'\n        }\n    }).then(response => response.json());\n}\n\nexport const findWidgetsForTopic = (topicId) =>\n    fetch(`http://localhost:8080/api/topics/${topicId}/widgets`)\n        .then(response => response.json());\n\nexport const deleteWidget = (widgetId) =>\n    fetch(`${WIDGET_URL}/${widgetId}`, {\n        method: 'DELETE'\n    })\n        .then(response => response.json());\n\nexport const updateWidget = (widgetId, updatedWidget) => {\n    fetch(`${WIDGET_URL}/${widgetId}`, {\n        method: \"PUT\",\n        body: JSON.stringify(updatedWidget),\n        headers: { 'content-type': 'application/json' }\n    }).then(response => response.json());\n}\n\nconst widgetApi = {\n    createWidget, findWidgetsForTopic, deleteWidget, updateWidget, findAllWidgets, createWidgetForTopic\n}\n\nexport default widgetApi;"]},"metadata":{},"sourceType":"module"}